/*
 * #%L
 * Bitrepository Reference Pillar
 * %%
 * Copyright (C) 2010 - 2012 The State and University Library, The Royal Library and The State Archives, Denmark
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */
package org.bitrepository.client;

import org.bitrepository.client.componentid.ComponentIDHelper;
import org.bitrepository.common.settings.SettingsLoader;
import org.bitrepository.common.settings.SettingsProvider;
import org.bitrepository.settings.referencesettings.ReferenceSettings;

public class CommandLineSettingsProvider extends SettingsProvider {

    /**
     * Creates a <code>SettingsProvider</code> which will use the provided <code>SettingsLoader</code> for loading the
     * settings.
     * Sets the componentID to one generated by a <code>ComponentIDFactory</code> depending on what is set in
     * ReferenceSettings - ClientSettings - ComponentIDFactory.
     * If none ComponentIDFactory is set, the default is to use <code>DefaultCommandlineComponentID</code>
     *
     * @param settingsReader Use for loading the settings.
     */
    public CommandLineSettingsProvider(SettingsLoader settingsReader) {
        super(settingsReader, null);
    }

    protected String getComponentID(ReferenceSettings referenceSettings) {
        String componentIDFactoryClass = null;
        if (referenceSettings.getClientSettings().getComponentIDFactoryClass() != null) {
            componentIDFactoryClass = referenceSettings.getClientSettings().getComponentIDFactoryClass();
        }

        ComponentIDHelper helper = new ComponentIDHelper(componentIDFactoryClass);

        return helper.getComponentID();
    }
}
